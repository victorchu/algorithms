#!/usr/bin/env python3
"""
Each new term in the Fibonacci sequence is generated by adding the
previous two terms. By starting with 1 and 2, the first 10 terms
will be:

> 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.

Example:
  - When the upper bound is 100, the even sum = 2 + 8 + 34  = 44

Follow up:
  - What is the time complexity?

Reference:
  - https://projecteuler.net/problem=2
  - https://www.baeldung.com/cs/fibonacci-computational-complexity

"""

from typing import List


class Solution:

    def method1(self, n):
        """Use loop.

        Complexity: O(log N)
        """
        f_prev = 1
        f_curr = 2
        ans = 0
        while f_curr < n:
            # Accumulate even values
            if f_curr % 2 == 0:
                ans += f_curr

            # Generate the next Fibonacci number
            f_next = f_prev + f_curr
            f_prev = f_curr
            f_curr = f_next  # Note that this may go beyond n

        return ans

    def method2(self, n):
        """Use recursion.

        This recurssion goes forwards instead of backwards.
        Thus, it is still computationally efficient.
        It would consume more memory though.

        Complexity: O(log N).  Memory: O(log N)
        """
        def fib(x1, x2, n):
            """x2 is the current fibonacci value; x1 is the previous."""
            if x2 >= n:
                return 0
            else:
                val = x2 if (x2 % 2 == 0) else 0
                return val + fib(x2, x1 + x2, n)

        return fib(1, 2, n)


def main():
    test_data = [
        100,
        4000000,
    ]

    sol = Solution()
    for data in test_data:
        print("# Input: {}".format(data))
        print("  - Output v1: {}".format(sol.method1(data)))
        print("  - Output v2: {}".format(sol.method2(data)))


if __name__ == "__main__":
    main()
